{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  itens: [{\n    id: 1,\n    nome: 'Débora Sete Acosta',\n    email: 'deborasete@gmail.com',\n    telefone: '(11) 99999-0000'\n  }, {\n    id: 2,\n    nome: 'Maria Consuelo',\n    email: 'mariaconsuelo@gmail.com',\n    telefone: '(11) 98888-0000'\n  }, {\n    id: 3,\n    nome: 'João Gael',\n    email: 'joaogael@gmail.com',\n    telefone: '(11) 97777-0000'\n  }]\n};\nconst contatosSlice = createSlice({\n  name: 'contatos',\n  initialState,\n  reducers: {\n    remover: (state, action) => {\n      state.itens = state.itens.filter(c => c.id !== action.payload);\n    },\n    editar: (state, action) => {\n      const index = state.itens.findIndex(c => c.id === action.payload.id);\n      if (index >= 0) {\n        state.itens[index] = action.payload;\n      }\n    },\n    cadastrar: (state, action) => {\n      const contatoExistente = state.itens.find(c => c.email.toLowerCase() === action.payload.email.toLowerCase());\n      if (contatoExistente) {\n        alert('Já existe um contato com esse e-mail');\n      } else {\n        const ultimo = state.itens[state.itens.length - 1];\n        const novoContato = {\n          ...action.payload,\n          id: ultimo ? ultimo.id + 1 : 1\n        };\n        state.itens.push(novoContato);\n      }\n    }\n  }\n});\nexport const {\n  remover,\n  editar,\n  cadastrar\n} = contatosSlice.actions;\nexport default contatosSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","itens","id","nome","email","telefone","contatosSlice","name","reducers","remover","state","action","filter","c","payload","editar","index","findIndex","cadastrar","contatoExistente","find","toLowerCase","alert","ultimo","length","novoContato","push","actions","reducer"],"sources":["C:/Users/seted/Desktop/Projects/EBAC/exercicios/contacts-list/to-do_list/src/store/reducers/contatos.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport Contato from '../../models/Contat'\n\ntype ContatosState = {\n  itens: Contato[]\n}\n\nconst initialState: ContatosState = {\n  itens: [\n    {\n      id: 1,\n      nome: 'Débora Sete Acosta',\n      email: 'deborasete@gmail.com',\n      telefone: '(11) 99999-0000'\n    },\n    {\n      id: 2,\n      nome: 'Maria Consuelo',\n      email: 'mariaconsuelo@gmail.com',\n      telefone: '(11) 98888-0000'\n    },\n    {\n      id: 3,\n      nome: 'João Gael',\n      email: 'joaogael@gmail.com',\n      telefone: '(11) 97777-0000'\n    }\n  ]\n}\n\nconst contatosSlice = createSlice({\n  name: 'contatos',\n  initialState,\n  reducers: {\n    remover: (state, action: PayloadAction<number>) => {\n      state.itens = state.itens.filter((c) => c.id !== action.payload)\n    },\n    editar: (state, action: PayloadAction<Contato>) => {\n      const index = state.itens.findIndex((c) => c.id === action.payload.id)\n      if (index >= 0) {\n        state.itens[index] = action.payload\n      }\n    },\n    cadastrar: (state, action: PayloadAction<Omit<Contato, 'id'>>) => {\n      const contatoExistente = state.itens.find(\n        (c) => c.email.toLowerCase() === action.payload.email.toLowerCase()\n      )\n\n      if (contatoExistente) {\n        alert('Já existe um contato com esse e-mail')\n      } else {\n        const ultimo = state.itens[state.itens.length - 1]\n        const novoContato = {\n          ...action.payload,\n          id: ultimo ? ultimo.id + 1 : 1\n        }\n        state.itens.push(novoContato)\n      }\n    }\n  }\n})\n\nexport const { remover, editar, cadastrar } = contatosSlice.actions\nexport default contatosSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAO7D,MAAMC,YAA2B,GAAG;EAClCC,KAAK,EAAE,CACL;IACEC,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,oBAAoB;IAC1BC,KAAK,EAAE,sBAAsB;IAC7BC,QAAQ,EAAE;EACZ,CAAC,EACD;IACEH,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,gBAAgB;IACtBC,KAAK,EAAE,yBAAyB;IAChCC,QAAQ,EAAE;EACZ,CAAC,EACD;IACEH,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE,oBAAoB;IAC3BC,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC;AAED,MAAMC,aAAa,GAAGP,WAAW,CAAC;EAChCQ,IAAI,EAAE,UAAU;EAChBP,YAAY;EACZQ,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAA6B,KAAK;MACjDD,KAAK,CAACT,KAAK,GAAGS,KAAK,CAACT,KAAK,CAACW,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACX,EAAE,KAAKS,MAAM,CAACG,OAAO,CAAC;IAClE,CAAC;IACDC,MAAM,EAAEA,CAACL,KAAK,EAAEC,MAA8B,KAAK;MACjD,MAAMK,KAAK,GAAGN,KAAK,CAACT,KAAK,CAACgB,SAAS,CAAEJ,CAAC,IAAKA,CAAC,CAACX,EAAE,KAAKS,MAAM,CAACG,OAAO,CAACZ,EAAE,CAAC;MACtE,IAAIc,KAAK,IAAI,CAAC,EAAE;QACdN,KAAK,CAACT,KAAK,CAACe,KAAK,CAAC,GAAGL,MAAM,CAACG,OAAO;MACrC;IACF,CAAC;IACDI,SAAS,EAAEA,CAACR,KAAK,EAAEC,MAA0C,KAAK;MAChE,MAAMQ,gBAAgB,GAAGT,KAAK,CAACT,KAAK,CAACmB,IAAI,CACtCP,CAAC,IAAKA,CAAC,CAACT,KAAK,CAACiB,WAAW,CAAC,CAAC,KAAKV,MAAM,CAACG,OAAO,CAACV,KAAK,CAACiB,WAAW,CAAC,CACpE,CAAC;MAED,IAAIF,gBAAgB,EAAE;QACpBG,KAAK,CAAC,sCAAsC,CAAC;MAC/C,CAAC,MAAM;QACL,MAAMC,MAAM,GAAGb,KAAK,CAACT,KAAK,CAACS,KAAK,CAACT,KAAK,CAACuB,MAAM,GAAG,CAAC,CAAC;QAClD,MAAMC,WAAW,GAAG;UAClB,GAAGd,MAAM,CAACG,OAAO;UACjBZ,EAAE,EAAEqB,MAAM,GAAGA,MAAM,CAACrB,EAAE,GAAG,CAAC,GAAG;QAC/B,CAAC;QACDQ,KAAK,CAACT,KAAK,CAACyB,IAAI,CAACD,WAAW,CAAC;MAC/B;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEhB,OAAO;EAAEM,MAAM;EAAEG;AAAU,CAAC,GAAGZ,aAAa,CAACqB,OAAO;AACnE,eAAerB,aAAa,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
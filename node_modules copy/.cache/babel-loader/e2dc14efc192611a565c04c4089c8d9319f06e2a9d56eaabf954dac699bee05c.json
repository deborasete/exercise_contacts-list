{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport Contato from '../../models/Contato';\nconst initialState = {\n  itens: [new Contato(1, 'Débora Sete Acosta', 'deborasete@gmail.com', '(11) 99999-0000'), new Contato(2, 'Maria Consuelo', 'mariaconsuelo@gmail.com', '(11) 98888-0000'), new Contato(3, 'João Gael', 'joaogael@gmail.com', '(11) 97777-0000')],\n  termo: ''\n};\nconst contatosSlice = createSlice({\n  name: 'contatos',\n  initialState,\n  reducers: {\n    cadastrar: (state, action) => {\n      const existe = state.itens.some(c => c.email.toLowerCase() === action.payload.email.toLowerCase());\n      if (existe) {\n        alert('Já existe um contato com esse e-mail');\n      } else {\n        const ultimoId = state.itens.length > 0 ? state.itens[state.itens.length - 1].id : 0;\n        const novoContato = new Contato(ultimoId + 1, action.payload.nome, action.payload.email, action.payload.telefone);\n        state.itens.push(novoContato);\n      }\n    },\n    remover: (state, action) => {\n      state.itens = state.itens.filter(c => c.id !== action.payload);\n    },\n    editar: (state, action) => {\n      const index = state.itens.findIndex(c => c.id === action.payload.id);\n      if (index >= 0) {\n        state.itens[index] = action.payload;\n      }\n    },\n    alterarTermo: (state, action) => {\n      state.termo = action.payload;\n    }\n  }\n});\nexport const {\n  cadastrar,\n  remover,\n  editar,\n  alterarTermo\n} = contatosSlice.actions;\nexport default contatosSlice.reducer;","map":{"version":3,"names":["createSlice","Contato","initialState","itens","termo","contatosSlice","name","reducers","cadastrar","state","action","existe","some","c","email","toLowerCase","payload","alert","ultimoId","length","id","novoContato","nome","telefone","push","remover","filter","editar","index","findIndex","alterarTermo","actions","reducer"],"sources":["C:/Users/seted/Desktop/Projects/EBAC/exercicios/contacts-list/to-do_list/src/store/reducers/contatos.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport Contato from '../../models/Contato'\n\ntype ContatosState = {\n  itens: Contato[]\n  termo: string\n}\n\nconst initialState: ContatosState = {\n  itens: [\n    new Contato(1, 'Débora Sete Acosta', 'deborasete@gmail.com', '(11) 99999-0000'),\n    new Contato(\n      2,\n      'Maria Consuelo',\n      'mariaconsuelo@gmail.com',\n      '(11) 98888-0000'\n    ),\n    new Contato(3, 'João Gael', 'joaogael@gmail.com', '(11) 97777-0000')\n  ],\n  termo: ''\n}\n\nconst contatosSlice = createSlice({\n  name: 'contatos',\n  initialState,\n  reducers: {\n    cadastrar: (state, action: PayloadAction<Omit<Contato, 'id'>>) => {\n      const existe = state.itens.some(\n        (c) => c.email.toLowerCase() === action.payload.email.toLowerCase()\n      )\n      if (existe) {\n        alert('Já existe um contato com esse e-mail')\n      } else {\n        const ultimoId =\n          state.itens.length > 0 ? state.itens[state.itens.length - 1].id : 0\n        const novoContato = new Contato(\n          ultimoId + 1,\n          action.payload.nome,\n          action.payload.email,\n          action.payload.telefone\n        )\n        state.itens.push(novoContato)\n      }\n    },\n    remover: (state, action: PayloadAction<number>) => {\n      state.itens = state.itens.filter((c) => c.id !== action.payload)\n    },\n    editar: (state, action: PayloadAction<Contato>) => {\n      const index = state.itens.findIndex((c) => c.id === action.payload.id)\n      if (index >= 0) {\n        state.itens[index] = action.payload\n      }\n    },\n    alterarTermo: (state, action: PayloadAction<string>) => {\n      state.termo = action.payload\n    }\n  }\n})\n\nexport const { cadastrar, remover, editar, alterarTermo } = contatosSlice.actions\nexport default contatosSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAC7D,OAAOC,OAAO,MAAM,sBAAsB;AAO1C,MAAMC,YAA2B,GAAG;EAClCC,KAAK,EAAE,CACL,IAAIF,OAAO,CAAC,CAAC,EAAE,oBAAoB,EAAE,sBAAsB,EAAE,iBAAiB,CAAC,EAC/E,IAAIA,OAAO,CACT,CAAC,EACD,gBAAgB,EAChB,yBAAyB,EACzB,iBACF,CAAC,EACD,IAAIA,OAAO,CAAC,CAAC,EAAE,WAAW,EAAE,oBAAoB,EAAE,iBAAiB,CAAC,CACrE;EACDG,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,aAAa,GAAGL,WAAW,CAAC;EAChCM,IAAI,EAAE,UAAU;EAChBJ,YAAY;EACZK,QAAQ,EAAE;IACRC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAA0C,KAAK;MAChE,MAAMC,MAAM,GAAGF,KAAK,CAACN,KAAK,CAACS,IAAI,CAC5BC,CAAC,IAAKA,CAAC,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,KAAKL,MAAM,CAACM,OAAO,CAACF,KAAK,CAACC,WAAW,CAAC,CACpE,CAAC;MACD,IAAIJ,MAAM,EAAE;QACVM,KAAK,CAAC,sCAAsC,CAAC;MAC/C,CAAC,MAAM;QACL,MAAMC,QAAQ,GACZT,KAAK,CAACN,KAAK,CAACgB,MAAM,GAAG,CAAC,GAAGV,KAAK,CAACN,KAAK,CAACM,KAAK,CAACN,KAAK,CAACgB,MAAM,GAAG,CAAC,CAAC,CAACC,EAAE,GAAG,CAAC;QACrE,MAAMC,WAAW,GAAG,IAAIpB,OAAO,CAC7BiB,QAAQ,GAAG,CAAC,EACZR,MAAM,CAACM,OAAO,CAACM,IAAI,EACnBZ,MAAM,CAACM,OAAO,CAACF,KAAK,EACpBJ,MAAM,CAACM,OAAO,CAACO,QACjB,CAAC;QACDd,KAAK,CAACN,KAAK,CAACqB,IAAI,CAACH,WAAW,CAAC;MAC/B;IACF,CAAC;IACDI,OAAO,EAAEA,CAAChB,KAAK,EAAEC,MAA6B,KAAK;MACjDD,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACuB,MAAM,CAAEb,CAAC,IAAKA,CAAC,CAACO,EAAE,KAAKV,MAAM,CAACM,OAAO,CAAC;IAClE,CAAC;IACDW,MAAM,EAAEA,CAAClB,KAAK,EAAEC,MAA8B,KAAK;MACjD,MAAMkB,KAAK,GAAGnB,KAAK,CAACN,KAAK,CAAC0B,SAAS,CAAEhB,CAAC,IAAKA,CAAC,CAACO,EAAE,KAAKV,MAAM,CAACM,OAAO,CAACI,EAAE,CAAC;MACtE,IAAIQ,KAAK,IAAI,CAAC,EAAE;QACdnB,KAAK,CAACN,KAAK,CAACyB,KAAK,CAAC,GAAGlB,MAAM,CAACM,OAAO;MACrC;IACF,CAAC;IACDc,YAAY,EAAEA,CAACrB,KAAK,EAAEC,MAA6B,KAAK;MACtDD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACM,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER,SAAS;EAAEiB,OAAO;EAAEE,MAAM;EAAEG;AAAa,CAAC,GAAGzB,aAAa,CAAC0B,OAAO;AACjF,eAAe1B,aAAa,CAAC2B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}